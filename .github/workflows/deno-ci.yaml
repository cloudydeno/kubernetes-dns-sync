name: CI

on:
  push:
    branches: [ main ]
    tags: [ v* ]
    paths-ignore:
      - 'examples/**'
  pull_request: {}

jobs:

  check:
    runs-on: ubuntu-latest
    name: Check w/ ${{ matrix.deno-version }}
    strategy:
      matrix:
        deno-version:
        # v1.14 and earlier unsupported by /x/observability@v0.1.2
        - v1.15
        - v1.16
        - v1.17
        - canary
      fail-fast: false # run each branch to completion

    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Use Deno ${{ matrix.deno-version }}
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ matrix.deno-version }}

    # "https" cache: code from the Internet
    # External sources won't change much so we use less precise keys
    - name: Cache https://
      uses: actions/cache@v2
      with:
        path: ~/.cache/deno/deps/https
        key: deno-https/v1-${{ github.sha }}
        restore-keys: deno-https/v1-

    - name: Check controller/mod.ts
      run: time deno cache controller/mod.ts

    - name: Run test suite
      run: time deno test

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    needs: check
    runs-on: ubuntu-latest
    name: 'Push container image'
    if: github.event_name == 'push'

    steps:
      - name: Determine image name
        id: name
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "Will push to $IMAGE_ID:$VERSION"
          echo "::set-output name=image::$IMAGE_ID:$VERSION"

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.name.outputs.image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  push-multiarch:
    needs: check
    runs-on: ubuntu-latest
    name: 'Push multi-arch image'
    if: github.event_name == 'push'

    steps:

      - name: Determine image name
        id: name
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          TAG=$VERSION-multiarch
          [ "$TAG" == "main-multiarch" ] && TAG=multiarch
          echo "Will push to $IMAGE_ID:$TAG"
          echo "::set-output name=image::$IMAGE_ID:$TAG"

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v2
      - name: Prep multiarch Dockerfile
        run: |
          sed s@denoland/deno:alpine-@lukechannings/deno:v@ Dockerfile > Dockerfile.multiarch

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          file: Dockerfile.multiarch
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.name.outputs.image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
